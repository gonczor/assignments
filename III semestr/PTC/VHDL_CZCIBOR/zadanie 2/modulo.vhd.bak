LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY D IS
PORT(
D, CLK :IN std_logic;
Q :OUT std_logic
);
end D;

ARCHITECTURE first OF D IS
begin
synch_D: process(CLK)

begin
if rising_edge(CLK) then
	Q <= D;
end if;
end process synch_D;
end first;

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY D_vhdl IS
PORT(
KEY :IN std_logic;
LEDR :OUT std_logic_vector(3 DOWNTO 0)
);
end D_vhdl;

ARCHITECTURE second OF modulo IS
COMPONENT D IS
PORT(
D, CLK :IN std_logic;
Q :OUT std_logic
);
END COMPONENT D;
signal q1out,q2out,q3out,q4out : std_logic;
begin
DFF1: D PORT MAP(
D => not q2out,
CLK => KEY,
Q => q1out
);
DFF2: D PORT MAP(
D => (not q2out) or (q3out xor q1out),
CLK => KEY,
Q => q2out
);
DFF3: D PORT MAP(
D => (q2out xor q3out),
CLK => KEY,
Q => q3out
);
DFF4: D PORT MAP(
D => (q2out xor q3out),
CLK => KEY,
Q => q4out
);
--COUT: process(q4out,q3out,q2out,q1out);
--begin
LEDR <= (q4out,q3out,q2out,q1out);
--end process COUT;
end second;